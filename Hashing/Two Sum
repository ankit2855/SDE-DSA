// Leetcode.
// TC : O(N), in c++ while using unordered_map, in case of many collisions, insertion and searching takes O(N) time so
// total time will become O(N^2).
// But we consider there will not be any collisions.
// SC : O(N)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int>result;
        unordered_map<int,int>umap;
  
          for(int i = 0; i<nums.size(); i++){
            
            if(umap.find(target-nums[i]) != umap.end()){
                
                result.push_back(umap[target - nums[i]]);
                result.push_back(i);
                return result;
           }
            
            umap[nums[i]] = i;
            
        }
        return result;
    }
};
