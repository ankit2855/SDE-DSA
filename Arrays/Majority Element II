// > N/3 times
// The optimal approach used is moore's voting algorithm.
// Also it should be noted that there can be only two majory elements that are greater than n/3 at max.
// For eg. N = 90, so there can be two elements only whose count > 30.

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        
        int candidate1 = -1,candidate2 = -1;
        int count1 = 0,count2 = 0;
        int n = nums.size();
        
        int i = 0;
        while(i < n){
  
  // Always keep the count = 0 comparsions below the element equality comparisons.
            if(nums[i] == candidate1){
                count1++;
            }
            else if(nums[i] == candidate2){
                count2++;
            }
            
            //Count comparisons.
            
            else if(count1 == 0){
                candidate1 = nums[i]; 
                count1=1;
            }
            else if(count2 == 0){
                candidate2 = nums[i];
                count2=1;
            }
            
            // If an element is encountered which is not equal to candidate1 or candidate2 
            // then decrement both their counts.
            
            else{
                count1--;
                count2--;
            }
            
            i++;
        }
        
  // After this loop we have found the candidates that can be majority elements.
  //Now lineraly traverse through the array to find their actual counts.
  //And return the elements whose count > N/3 as majority elements.
        count1=0;
        count2=0;
        
        for(i = 0; i<n; i++){
            
            if(nums[i] == candidate1){
                count1++;
            }
            else if(nums[i] == candidate2){
                count2++;
            }
            
        }
        vector<int>result;
        
        if(count1 > n/3) result.push_back(candidate1);
        
        if(count2 > n/3) result.push_back(candidate2);
        
        return result;
    }
};
