// The idea is to start traversing from back and find a point where arr[i] < arr[i+1]
// Then again traverse from the back and find the first element that is greater than arr[i]
// Swap these elements and then reverse everything after ith index because from the last to ith digit 
// the elements are in decreasing order and if we reverse them they become in increasing order which will be less
// in permutation.
// For eg 13542 we find the break point where elements stop increasing from the back.
// the point is 3 since 3 < 5 .
// We again traverse from the back and find the first element that is greater than 3 i.e 4.
// we swap them so they become 14532 now you can see the elements are still in decreasing order from the back
// if We reverse this they will be in increasing order and we will get the next permutation.

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        
        int n = nums.size();
        if(n <= 1){
            return;
        }
        
        int i = n-2,j;
  
  // find the break point.
        while(i >=0 && nums[i] >= nums[i+1]){
            i--;
        }
        // if i<0 that means no break point found. for eg- 4321.
        //So in this case just reverse the array and the elements will be in increasing order.
        // This condition can only be triggerred when numbers are in decreasing order from n-1 to 0.
        if(i < 0)
        {
            reverse(nums.begin(),nums.end());
           return; 
        }
        for(j = n-1; j > i; j--){
        // Find the first greater element.
            if(nums[j] > nums[i]){
                break;
            }
        }
        //Swap these two.
        swap(nums[i],nums[j]);
        
        // Reverse the i+1th to n-1th elements so that they are arranged in increasing order.
        reverse(nums.begin()+i+1,nums.end());
    }
};
