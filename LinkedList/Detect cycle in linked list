// Brute force approach would be to use a hashset for storing the nodes when you encounter them
// Note : Storing the complete nodes and not the values because using address we will compare if this exists previously 
// in hashset or not.
// This is a naive approach which takes TC : O(N) & SC : O(N).

//############################################################################################################################################################################################//
// Optimal approach is to use floyd warshal's cycle detection algo.
// TC : O(N)
// SC : O(1).
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
  
      // If list is empty or has only one item then return false.
      if(head == NULL || head->next == NULL)return false;
        
        ListNode* hare = head->next;
        ListNode* tortoise = head;
        
        while(hare->next != NULL && hare->next->next != NULL){
            
            // Since hare is always ahead of tortoise so
            // if hare equals to tortoise that means there
            // was a loop in the list otherwise it is not possible.
            
             if(hare == tortoise)return true;
            
            hare = hare->next->next;
            tortoise = tortoise->next;
            
           
        }
    return false;
    }
};
