// So brute force can be For each node ai in list A, traverse the entire list B and check if any node in list B coincides with ai.
// TC : O(mn) SC : O(1).

// A bit optimized approach is Traverse list A and store the address / reference to each node in a hash set. 
// Then check every node bi in list B: if bi appears in the hash set, then bi is the intersection node.
// TC : O(m+n) SC : O(m) or O(n)

//##################################################################################################################################################################################//
// The most optimal approach is to use two pointers.
// Maintain two pointers pA and pB initialized at the head of A and B, respectively. Then let them both traverse through the lists, one node at a time.
// When pA reaches the end of a list, then redirect it to the head of B (yes, B, that's right.); 
// similarly when pB reaches the end of a list, redirect it the head of A.
// If at any point pApA meets pB, then pApA/pBpB is the intersection node.
// To see why the above trick would work, consider the following two lists: A = {1,3,5,7,9,11} and B = {2,4,9,11}, 
// which are intersected at node '9'. Since B.length (=4) < A.length (=6), 
// pB would reach the end of the merged list first, because pBpB traverses exactly 2 nodes less than pApA does. 
// By redirecting pB to head A, and pA to head B, we now ask pB to travel exactly 2 more nodes than pA would. 
// So in the second iteration, they are guaranteed to reach the intersection node at the same time.
//If two lists have intersection, then their last nodes must be the same one. 
// So when pA/pB reaches the end of a list, record the last element of A/B respectively. 
// If the two last elements are not the same one, then the two lists have no intersections.

// HOW DOES THIS CODE WORK FOR THE CASE WHERE THERE IS NO MERGE. ? 
// // Found this explanation somewhere which is detailed.

// In case there are no merge the last element of each of the list will point to a NULL. 
// Let's say 1st list (L1) has 3 elements and 2nd list (L2) has 5 elements. 
// Now let's do the 1st pass with 2 pointers p1 and p2. 
// When p1 is at the last element of L1, p2 will be at 3rd element of L2. 
// At this point when we move the pointers forward, p1 will be NULL and p2 will be pointing to 4th element of L1. 
// Based on the solutions algorithm we now update p1 to point to the 1st element of L2. 
// So at this point p1 is pointing to 1st element of L2 and p2 is pointing to 4th element of L2. 
// If we move the pointers forward p1 points to 2nd element of L2 and p2 points to 5th element of L2. 
// Now if we move the pointers forward, p1 points to 3rd element of L2 and p2 will points to NULL. 
// Algorithm kicks in again and we update p2 to point to 1st element of L1. 
// So now we had completed reassigning of both the pointers 
// and the claim here is that the pointers are now equidistant from the merge point (or if there's no merge then it is equidistant from the end which is NULL). 
// Let's see if this is true. Ok so now p1 is pointing to the 3rd element of L2 and p2 is pointing to the 1st element of L1. 
// Move them forward, p1 points to 4th element of L2 and p2 points to 2nd element of L1. 
// Move them forward, p1 points to 5th element of L2 and p2 points to 3rd element of L1. 
// Note that both the pointers are at the end of the lists but still not equal. Now if we move the pointers forward both will be NULL. 
// Based on the algorithm now both pointers are equal and hence we return one of them, which is NULL.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        
        ListNode* p1 = headA;
        ListNode* p2 = headB;
        if(p1 == NULL || p2 == NULL){
        
            return NULL;
        
        }
        while(p1 != p2){
           
            p1 = p1->next;
            p2 = p2->next;
            
        // Any time they collide or reach end together without colliding 
        // then return any one of the pointers.
        
            if(p1 == p2) return p1;
        
        // If one of them reaches the end earlier then reuse it 
        // by moving it to the beginning of other list.
        // Once both of them go through reassigning, 
        // they will be equidistant from the collision point.
        
            if(p1 == NULL) p1 = headB;
            
            if(p2 == NULL) p2 = headA;
            
        }
        
        // Lets say tha headA was [1] and headB was [1] and itersection point is 1.
        // So now the while loop above will be skipped.
        // Therefore we check here if headA and headB are equal 
        // if yes then return p1 else return NULL.
        
        p1 = p1 == p2 ? p1 : NULL;
        
        return p1;
    }
};
