// Leetcode

A Beautiful Solution.
//Maintain rowFlag and ColFlag to identify if the first row and first col contains 0.
// Maintain The first row and first column as an auxillary array.

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        
    // variables to check if there are any 1 
    // in first row and column 
    bool row_flag = true; 
    bool col_flag = true; 
  
    // updating the first row and col if 1 
    // is encountered 
    for (int i = 0; i < matrix.size(); i++) { 
        for (int j = 0; j < matrix[i].size(); j++) { 
            if (i == 0 && matrix[i][j] == 0) 
                row_flag = false; 
  
            if (j == 0 && matrix[i][j] == 0) 
                col_flag = false; 
  
            if (matrix[i][j] == 0) { 
  
                matrix[0][j] = 0; 
                matrix[i][0] = 0; 
            } 
        } 
    } 
  
    // Modify the input matrix mat[] using the 
    // first row and first column of Matrix mat 
    
    for (int i = 1; i < matrix.size(); i++) { 
        for (int j = 1; j < matrix[i].size(); j++) { 
  
            if (matrix[0][j] == 0 || matrix[i][0] == 0) { 
                matrix[i][j] = 0; 
            } 
        } 
    } 
  
    // modify first row if there was any 1 
    if (row_flag == false) { 
        for (int i = 0; i < matrix[0].size(); i++) { 
            matrix[0][i] = 0; 
        } 
    } 
  
    // modify first col if there was any 1 
    if (col_flag == false) { 
        for (int i = 0; i < matrix.size(); i++) { 
            matrix[i][0] = 0; 
        } 
    } 
} 
 
};

//#################################################################################################################################################################################//

// The idea is to use the first row and first column of the matrix
// as auxiliary arrays so that we can mark whether a current element is zero or not
// Say a[i][j] element is 0 so we mark arr[i][0] and arr[0][j] = 0;

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
  
    // Since first cell for both first row and first column is the same i.e. matrix[0][0]
      // We can use an additional variable for either the first row/column.
      // For this solution we are using an additional variable for the first column
      // and using matrix[0][0] for the first row.
      
        int col0 = 1;
       
        for(int i =0 ;i<matrix.size();i++){
            if(matrix[i][0] == 0) col0 =0;
            
            for(int j = 1; j<matrix[i].size(); j++){
                
               // If an element is zero, we set the first element of the corresponding row and column to 0
                if(matrix[i][j] == 0){
                    matrix[0][j] = matrix[i][0] = 0;
                }
            }
        }
        
        //Now start iterating backwards since we do not want to modify the first element of row and column
        // until the whole row/column has been traversed.
        
        for(int i = matrix.size() -1; i>=0; i--){
            
            for(int j = matrix[i].size()-1; j >=1; j--){
                
                // Now check if first element of row or first element of column is 0.
                
                if(matrix[i][0] == 0 || matrix[0][j] == 0){
                    matrix[i][j] = 0;
                }
            }
        
        // Setting the first element of row as 0 after the row has been traversed.
        // We cannot do this before because it will satisfy the above condition "matrix[i][0] == 0"
        // even when actually matrix[i][0] was not 0, it was made 0 because the column contained 0.
        
            if(col0 == 0){
                matrix[i][0] = 0;
            }
            
        }
    }
};
//############################################################################################################################################################################//
