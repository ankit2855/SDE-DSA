// The first solution is to start search in the from the last element of first row and check if the target is greater than current element
// increment i i.e move to the next row as ans is not in this row. We can say this as the rows are sorted in ascending order.
// else decrement j when element is greater than target, this means we will find the target in this row only if it is present.

// THIS SOLUTION IS NOT OPTIMAL SOLUTION if we have the condition that "The first integer of each row is greater than the last integer of the previous row." as stated in 
// " Search a 2D Matrix" on leetcode. Scroll down for optimal solution in that case.

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends





//User function template for C++
class Solution{
public:	
	int matSearch (vector <vector <int>> &mat, int N, int M, int X)
	{
	    // your code here
	    
	    if(N == 0){
	        return 0;
	    }
	    
	    int smallest = mat[0][0];
	    int largest = mat[N-1][M-1];
	    
      // The smallest element is the first element of matrix and largest is last element of matrix.
	    if(X < smallest || X > largest) return 0;
	    
	    int i = 0;
	    int j = M -1;
	
	    while(i < N && j>=0){
	    
	        if(mat[i][j] == X){
	            
	            return 1;
	        }
	        
	        else if(mat[i][j] > X){
	            j--;
	        }
	        else{
	            i++;
	        }
	    }
	   
	   return 0; 
	}
};


// { Driver Code Starts.

int main ()
{
    int t; cin >> t;
    while (t--){
        int n, m; cin >> n >> m;
        vector <vector <int>> arr (n, vector <int> (m));
        for (int i=0;i<n;i++)
            for (int j=0;j<m;j++)
                cin >> arr[i][j];
                
        int x; cin >> x;
        Solution ob;
        cout << ob.matSearch (arr, n, m, x) << endl;
    }
}  // } Driver Code Ends

//##################################################################################################################################################################################//

// Since the rows are sorted in such a way that if we merge all the rows together it will form a sorted array because of the condition 
// "The first integer of each row is greater than the last integer of the previous row."
// We can treat this 2D matrix as a big 1D array and do binary search in this. So TC = log(n * m).

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        if(!matrix.size()){
         return false;
        }
        int n = matrix.size();
        int m = matrix[0].size();
       
        int left = 0;
        // imaginary index ranges from 0 to n*m - 1. for eg for a 3x3 matrix imaginary index to treat it as a single
        // array will range from 0 to 8.
        
        int right = (n*m) -1;
        
        while(right>=left){
            int mid = left + (right-left)/2;
           
           // Now to find the original index we divide the mid by number of columns to get the row number since each row contains m number of elements.
           // So by dividing the imaginary index by no. of columns we get the current row.
           // And the current col is given by imaginary index % number of column. This is because the number of column for each row won't 
           // exceed the total number of columns. For eg if there are 3 columns in matrix i.e 0,1,2 so first row's columns will range from 0 to 2.
           
            if(matrix[mid/m][mid%m] == target){
                return true;
            }
            else if(matrix[mid/m][mid%m] < target){
             left = mid + 1;
            }
            else{
                right = mid - 1;
            }
        }
    return false;
    }
};




